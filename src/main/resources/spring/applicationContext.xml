<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
       					   http://www.springframework.org/schema/context 
       		               http://www.springframework.org/schema/context/spring-context.xsd
       					   http://www.springframework.org/schema/aop
       					   http://www.springframework.org/schema/aop/spring-aop.xsd
       					   http://www.springframework.org/schema/tx 
       					   http://www.springframework.org/schema/tx/spring-tx.xsd
       					   http://www.springframework.org/schema/mvc 
		                   http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    
	<!--springMVC注解：开启适配器和映射器 配置这个就OK -->
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	<!--自定义绑定参数组件conversionService -->
	<!--<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
	<!--转换器  -->
	  <!--<property name="converters">-->
	    <!--<list>-->
	    <!--&lt;!&ndash;日期转换  &ndash;&gt;-->
	     <!--<bean class="com.fly.ssm.web.converter.DateConverter"/>-->
	     <!--&lt;!&ndash;还可以继续定义其他的转换类 比如字符串去前后空格  &ndash;&gt;-->
	     <!--&lt;!&ndash; <bean class="com.fly.ssm.web.controller.ItemsCotroller2"/> &ndash;&gt;-->
	    <!--</list>-->
	  <!--</property>-->
	<!--</bean>-->

	<!--开启spring对注解的支持扫描的包 -->
	<context:component-scan base-package="com.fly.jks"></context:component-scan>


	<!-- 1.加载配置文件 db.properties文件命名要有一定规则：如jdbc.driver -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 2.配置c3p0数据源 -->
	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
		<!--<property name="driverClass" value="${jdbc.driver}"></property>-->
		<!--<property name="jdbcUrl" value="${jdbc.url}"></property>-->
		<!--<property name="user" value="${jdbc.username}"></property>-->
		<!--<property name="password" value="${jdbc.password}"></property>-->
	<!--</bean>-->


	<!-- 数据源  使用阿里Druid数据源  也可以用其它数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="20" />
		<property name="initialSize" value="5" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="5" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat,wall" />
		<property name="connectProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500"/>
		<property name="useGlobalDataSourceStat" value="true"/>
	</bean>



	<!--3.配置sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!--4.mapper接口的配置 相当于原来的dao接口 -->
	<!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 
	         遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中 
	         自动扫描出来的mapper的bean的id为mapper类名（首字母小写） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包名 如果扫描多个包，每个包中间使用半角逗号分隔 -->
		<property name="basePackage" value="com.fly.jks.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!--5.配置事务管理器 管理=注入dataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--注入数据源 dataSource -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--6.配置事务的通知,开启spring对注解事务的支持 引入上面配置的transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!--7.配置事务的属性 -->
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" read-only="false" /><!--读写 -->
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" /><!--只读 -->
		</tx:attributes>
	</tx:advice>
	<!-- 8.配置aop ：切入点表达式、通知和切入点表达式的关联 -->
	<aop:config>
		<!-- 配置切入点表达式 -->
		<aop:pointcut expression="execution(* com.fly.jks.service.impl.*.*(..))"
			id="pt" />
		<!-- 配置事务通知和切入点表达式的关联 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt" />
	</aop:config>
	
	<!--配置全局异常处理器  不用id 因为实现了HandlerExceptionResolver接口就是全局异常处理器-->
	<!--<bean class="com.fly.ssm.exception.CustomExceptionResolver"></bean>-->
	
   <!-- 多部分文件上传 -->
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
     <!-- 设置上传文件的最大尺寸为1MB -->
     <property name="maxUploadSize" value="1048576" />
     <!-- 设置缓存大小 -->
     <property name="maxInMemorySize" value="4096" />
   </bean>
   
   	<!--拦截器 -->
 <!--<mvc:interceptors>-->
	<!--&lt;!&ndash;多个拦截器,顺序执行 &ndash;&gt;-->
	<!--&lt;!&ndash; 登陆认证拦截器 &ndash;&gt;-->
	<!--<mvc:interceptor>-->
	    <!--&lt;!&ndash; /**表示拦截所有url包括子url路径 &ndash;&gt;-->
		<!--<mvc:mapping path="/**"/>-->
		<!--&lt;!&ndash; 不拦截路径:/ssm/syss/login.action&ndash;&gt;-->
		<!--<mvc:exclude-mapping path="/syss/login.action"/>-->
		<!--&lt;!&ndash;这些就写我们定义的拦截器全路径  &ndash;&gt;-->
		<!--<bean class="com.fly.ssm.interceptor.LoginInterceptor"></bean>-->
	<!--</mvc:interceptor>-->
 <!--</mvc:interceptors>-->
	
	<!--不拦截静态资源  -->
	<mvc:default-servlet-handler/>


</beans>


